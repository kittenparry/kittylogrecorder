#!/usr/bin/env python3

import tkinter as tk
from tkinter import messagebox
import time
import platform
import os
import sys


class Gui(tk.Frame):

	def __init__(self, master = None):
		tk.Frame.__init__(self, master)
		self.row_top = tk.Frame(master)
		self.row_bot = tk.Frame(master)
		self.row_top.grid(row=0, column=0)
		self.row_bot.grid(row=1, column=0, sticky='ew', padx=(10,0))
		self.add_elements()
		self.set_time()

	# draw/create gui elements
	def add_elements(self):
		# text area input and y-scrollbar
		# bind RETURN to text area input
		self.text_entry = tk.Text(self.row_bot, width=50, height=4, wrap='word', undo=True)
		self.text_entry.bind('<Return>', self.log_entry_event)
		self.text_entry.bind('<KP_Enter>', self.log_entry_event)
		self.scrolly = tk.Scrollbar(self.row_bot, orient='vertical', command=self.text_entry.yview)
		self.text_entry.configure(yscrollcommand=self.scrolly.set)

		# enter button
		self.button_enter = tk.Button(self.row_top, text=strings('button_enter'), command=self.log_entry)

		# time labels
		self.label_time = tk.Label(self.row_top, text='')

		# pack time, message, text area input and enter button
		# don't pack directory and filename label/entries
		# pack y-scrollbar separately
		self.elements = [self.label_time, self.text_entry, self.button_enter]
		for el in self.elements:
			el.pack(side='left', pady=2, padx=1)
		self.scrolly.pack(side='left', fill='y')

		# focus text area input on launch
		self.text_entry.focus()

	# entry event bound to RETURN key press on text area input
	# return 'break' prevents the logging of a new line character born from RETURN key press
	def log_entry_event(self, event):
		self.log_entry()
		return 'break'

	# logging/appending to file function
	def log_entry(self):
		log_record(str(self.text_entry.get('1.0', 'end')), True)
		self.text_entry.delete('1.0', 'end')

	# reset gui date/time display every .3 seconds
	def set_time(self):
		self.label_time.config(text=get_time())
		self.after(333, self.set_time)


# a dictionary of strings to hold everything in one place
dict_strings = {
	# static
	'title': 'Log Recorder',
	'button_enter': 'Enter',
	'version': '1.0',
	'version_full': 'logrecorder version %s',
	'help': """Usage: logrecorder [OPTIONS]
	
Options:
  -g, --gui\tLaunch the program in GUI instead of CLI.
  -v, --version\tShow version information and exit.
  -h, --help\tShow this message and exit.""",
	# messages
	'title_dir_create': 'Directory Created',
	'msg_dir_create': 'Directory %s has been created.',
	'title_err_io': 'I/O Error',
	'invalid_option': 'Invalid option \'%s\'.\nTry --help for help.',
	'invalid_num_args': 'Invalid number of arguments. Only 1 is allowed.\nTry --help for help.',
	# configurable
	'path_dir': 'Other',
	'name_filename': 'myLogs',
}

# returns the string value with given key
def strings(s):
	return dict_strings.get(s)

# if on Windows spawns the window to the upper left of the screen
# else top of the middle
# note: I don't have access to OS X to see if it looks good or if it works
# FIXME: assumes 1920 screen width for other OSes
def get_geometry():
	if platform.system() == 'Windows':
		return '435x115+94+0'
	# elif os == 'Linux'
	# might as well use else to include OS X
	else:
		screen_width = 1920
		program_width = 390
		x_position = (screen_width - program_width) / 2
		return ('%dx115+%d+30' % (program_width, x_position))


def start_gui():
	root = tk.Tk(className='logrecorder')
	# dpi problem fix for my own self, might not be an issue elsewhere
	if platform.system() == 'Linux':
		root.tk.call('tk', 'scaling', 1.3)
	root.title(strings('title'))
	root.geometry(get_geometry())
	app = Gui(master=root)
	app.mainloop()

#==============
#==============

def log_record(entry, gui = False):
	try:
		# get path and filename from their respective entries
		# currently the static values in the strings dictionary
		path = strings('path_dir')
		file = strings('name_filename')
		# create the directory if it doesn't exist already and inform the user
		if not os.path.exists(path):
			os.makedirs(path)
			if gui:
				messagebox.showinfo(strings('title_dir_create'), strings('msg_dir_create') % path)
			# print information message to console no matter
			print(strings('msg_dir_create') % path)
		
		# if filename doesn't end in .txt append it
		# if path ends in backward or forward slash append filename to path
		# else add a forward slash between them
		if file[len(file)-4:len(file)] != '.txt':
			file += '.txt'
		if path[len(path)-1:len(path)] == '\\' or path[len(path)-1:len(path)] == '/':
			log_path = path + file
		else:
			log_path = path + '/' + file
		
		# format the log output
		# 2019.03.07 20:30:05| this is a test log.
		# append it to the log file and clear the text area input
		log = get_time() + '| ' + str(entry) + ('' if gui else '\n')
		with open(log_path, 'a') as f:
			f.write(log)
	except IOError as e:
		if gui:
			messagebox.showerror(strings('title_err_io'), str(e))
		# print error log to console no matter
		print("%s: %s" % (strings('title_err_io'), str(e)))

# get time in the most logical fashion ever invented by mankind
# ISO-8601 https://www.iso.org/iso-8601-date-and-time-format.html
# YYYY.MM.DD HH:MM:SS ex. 2019.03.07 20:30:05
# month, day, hour, minute and seconds are with leading zeroes
# 24 hour formatting to not lose much more space in time
def get_time():
	return time.strftime('%Y.%m.%d %H:%M:%S')

def start_cli():
	print(strings('title'))
	while True:
		entry = input('>>')
		log_record(entry)


def start():
	if len(sys.argv) == 1:
		start_cli()
	elif len(sys.argv) == 2:
		arg = sys.argv[1]
		if arg == '-g' or arg == '--gui':
			start_gui()
		elif arg == '-h' or arg == '--help':
			print(strings('help'))
		elif arg == '-v' or arg == '--version':
			print(strings('version_full') % strings('version'))
		else:
			print(strings('invalid_option') % str(arg))
	else:
		print(strings('invalid_num_args'))


if __name__ == '__main__':
	start()
