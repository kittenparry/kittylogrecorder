#!/usr/bin/env python3

import tkinter as tk
from tkinter import messagebox
import time
import platform
import os
import sys
import signal
import argparse


def signal_handler(signal, frame):
	print('\nProgram was shutdown by user input (CTRL-C).')
	sys.exit()

signal.signal(signal.SIGINT, signal_handler)

VERSION = '1.5'

# config directory
if platform.system() == 'Windows':
	CONFIG_DIR = os.path.expanduser('~\\Documents\\logrecorder')
	DEF_PATH = os.path.expanduser('~\\logrecorder.logs.txt')
else: # Darwin & Linux
	CONFIG_DIR = os.path.expanduser('~/.config/logrecorder')
	DEF_PATH = os.path.expanduser('~/logrecorder.logs.txt')
CONFIG = os.path.join(CONFIG_DIR, 'logrecorder.conf')

# colourful messages
class COL:
	FAIL = '\033[91m'
	WARNING = '\033[93m'
	UNDERLINE = '\033[4m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'
	if platform.system() == 'Windows':
		FAIL = ''
		WARNING = ''
		UNDERLINE = ''
		BOLD = ''
		ENDC = ''

# configuration text
CONF_CONT = '# log=path/to/log\n# Tilde (~) could be used instead of absolute path to home.\n' \
	'# Check --help to set up from command line.\nlogs=%s\n'


class Gui(tk.Frame):

	def __init__(self, master = None):
		tk.Frame.__init__(self, master)
		self.row_top = tk.Frame(master)
		self.row_bot = tk.Frame(master)
		self.row_top.grid(row=0, column=0)
		self.row_bot.grid(row=1, column=0, sticky='ew', padx=(10,0))
		self.add_elements()
		self.set_time()

	# draw/create gui elements
	def add_elements(self):
		# text area input and y-scrollbar
		# bind RETURN to text area input
		self.text_entry = tk.Text(self.row_bot, width=50, height=4, wrap='word', undo=True)
		self.text_entry.bind('<Return>', self.log_entry_event)
		self.text_entry.bind('<KP_Enter>', self.log_entry_event)
		self.scrolly = tk.Scrollbar(self.row_bot, orient='vertical', command=self.text_entry.yview)
		self.text_entry.configure(yscrollcommand=self.scrolly.set)

		# enter button
		self.button_enter = tk.Button(self.row_top, text='Enter', command=self.log_entry)

		# time labels
		self.label_time = tk.Label(self.row_top, text='')

		# pack time, message, text area input and enter button
		# don't pack directory and filename label/entries
		# pack y-scrollbar separately
		self.elements = [self.label_time, self.text_entry, self.button_enter]
		for el in self.elements:
			el.pack(side='left', pady=2, padx=1)
		self.scrolly.pack(side='left', fill='y')

		# focus text area input on launch
		self.text_entry.focus()

	# entry event bound to RETURN key press on text area input
	# return 'break' prevents the logging of a new line character born from RETURN key press
	def log_entry_event(self, event):
		self.log_entry()
		return 'break'

	# logging/appending to file function
	def log_entry(self):
		log_record(str(self.text_entry.get('1.0', 'end')), True)
		self.text_entry.delete('1.0', 'end')

	# reset gui date/time display every .3 seconds
	def set_time(self):
		self.label_time.config(text=get_time())
		self.after(333, self.set_time)


# if on Windows spawns the window to the upper left of the screen
# else top of the middle
# note: I don't have access to OS X to see if it looks good or if it works
# FIXME: assumes 1920 screen width for other OSes
def get_geometry():
	if platform.system() == 'Windows':
		return '435x115+94+0'
	# elif os == 'Linux'
	# might as well use else to include OS X
	else:
		screen_width = 1920
		program_width = 390
		x_position = (screen_width - program_width) / 2
		return ('%dx115+%d+30' % (program_width, x_position))

def log_record(entry, gui = False):
	try:
		# get path and filename from their respective entries
		# currently the static values in the strings dictionary
		data = get_config()
		path = os.path.dirname(data)
		file = os.path.basename(data) # does this work all the time?
		
		file = get_txt_ext(file)
		log_path = os.path.join(path, file)
		
		# format the log output
		# 2019.03.07 20:30:05| this is a test log.
		# append it to the log file
		log = get_time() + '| ' + str(entry).strip() + '\n'
		with open(log_path, 'a') as f:
			f.write(log)
	except IOError as e:
		if gui:
			messagebox.showerror('I/O Error', str(e))
		# print error log to console no matter
		prn_err_io(e)

# get time in the most logical fashion ever invented by mankind
# ISO-8601 https://www.iso.org/iso-8601-date-and-time-format.html
# YYYY.MM.DD HH:MM:SS ex. 2019.03.07 20:30:05
# month, day, hour, minute and seconds are with leading zeroes
# 24 hour formatting to not lose much more space in time
def get_time():
	return time.strftime('%Y.%m.%d %H:%M:%S')

def create_config():
	"""Config file initialisation with default values."""
	try:
		if not os.path.isdir(CONFIG_DIR):
			os.makedirs(CONFIG_DIR)
			print('%s has been created.' % CONFIG_DIR)
		if not os.path.isfile(CONFIG):
			with open(CONFIG, 'w') as conf:
				conf.writelines(CONF_CONT % DEF_PATH)
				print('Config file has been initialised with default logs path set to:\n%s' % DEF_PATH)
	except IOError as e:
		prn_err_io(e)

def get_config():
	"""At launch, read path to logs file from logrecorder.conf."""
	try:
		if os.path.isfile(CONFIG):
			temp = list(filter(None, open(CONFIG).read().split('\n')))
			for line in temp:
				if line.startswith('#'):
					pass
				else:
					if line.startswith('logs='):
						return check_path(line)
	except FileNotFoundError as e:
		print('%sERROR%s: logrecorder.conf does not exist, re-run the program with no parameters to create it.\n' \
		'Or check writing permissions.' % (COL.FAIL, COL.ENDC))

def check_path(line):
	"""Sterilise path value read from logrecorder.conf in get_config().
	Removing any leading or trailing whitespace, replace ~ with $HOME if starts with ~.
	Create directory if it doesn't already exist.
	
	keyword args:
	line -- line of string read from config file that has path information
	"""
	input_src = line.replace('logs=', '', 1).strip()
	if input_src == '':
		return ''
	input_src = if_home(input_src)
	if os.path.isdir(os.path.dirname(input_src)):
		return input_src
	else:
		try:
			os.makedirs(os.path.dirname(input_src))
			return input_src
		except IOError as e:
			prn_err_io(e)

def if_home(val):
	"""Return replacing ~ with $HOME value if starts with ~, return itself if not.
	
	keyword args:
	val -- path string
	"""
	if val.startswith('~'):
		return val.replace('~', os.path.expanduser('~'), 1)
	return val

def set_config(logs):
	"""Change logs file path in logrecorder.conf.
	
	keyword args:
	logs -- string path to logs passed using -p option
	"""
	try:
		if not os.path.isdir(CONFIG_DIR):
			os.makedirs(CONFIG_DIR)
			print('%s has been created.' % CONFIG_DIR)
		with open(CONFIG, 'w') as conf:
			conf.writelines(CONF_CONT % logs)
			print('Config file has been edited. Logs path set to:\n%s' % logs)

	except IOError as e:
		prn_err_io(e)

def get_info():
	"""Print currently set path to logs file and exit."""
	print('%sLogs path:%s\t%s' % (COL.BOLD, COL.ENDC, get_config()))
	sys.exit()

def get_txt_ext(file):
	"""If filename doesn't end in .txt append it."""
	return (file + '.txt') if file[len(file)-4:len(file)] != '.txt' else file

def prn_err_io(e):
	"""Print an I/O error with red coloured text."""
	print('%sERROR%s: I/O Error: %s' % (COL.FAIL, COL.ENDC, e))


def start_cli():
	print('Log Recorder v%s\n' % VERSION)
	# TODO: print info on how to close (ctrl-c) and how to clear if possible
	while True:
		entry = input('>> ')
		log_record(entry)

def start_gui():
	root = tk.Tk(className='logrecorder')
	# dpi problem fix for my own self, might not be an issue elsewhere
	if platform.system() == 'Linux':
		root.tk.call('tk', 'scaling', 1.3)
	root.title('Log Recorder')
	root.geometry(get_geometry())
	app = Gui(master=root)
	app.mainloop()


def start():
	parser = argparse.ArgumentParser(description='Write into a designated text file with timestamps. A diary, log keeping program if you will.')
	parser.add_argument('-v', '--version',
		help='show version information and exit',
		action='store_true')
	parser.add_argument('-i', '--info',
		help='print current path to log file and exit',
		action='store_true')
	parser.add_argument('-c', '--cli',
		help='launch the program in cli instead of gui (default behaviour in windows)',
		action='store_true')
	parser.add_argument('-g', '--gui',
		help='launch the program in gui instead of cli',
		action='store_true')
	parser.add_argument('-p', '--path',
		help='set path to log file in config file',
		type=str)

	args = parser.parse_args()
	# initialise config file if it doesn't exist
	create_config()
	if len(sys.argv) == 1:
		start_cli()
	else:
		if args.version:
			print('logrecorder version %s' % VERSION)
			sys.exit()
		if args.info:
			get_info()
		if args.path:
			set_config(args.path)
		if args.cli and args.gui:
			print('%sWARNING%s: Cannot combine --gui & --cli. Defaulting to CLI...' % (COL.WARNING, COL.ENDC))
			start_cli()
		elif args.cli: # cli or gui, not both
			start_cli()
		elif args.gui:
			start_gui()


if __name__ == '__main__':
	# on Windows with no argument provided, start with GUI by default
	if platform.system() == 'Windows' and len(sys.argv) == 1:
		sys.argv.append('-g')
	start()
